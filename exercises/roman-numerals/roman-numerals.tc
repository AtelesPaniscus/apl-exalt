log←'./roman-numerals.tc.log'
⍎ ')COPY ',(⎕FIO 30),'/../../test.apl'

⍝ assert a match

∇ R ← A assert∆match B
    R ← A ≡ B
    → R / exit
    R ← 1⎕CR A
exit:
∇

test∆copy_relative 'roman-numerals.apl'
test∆clear_log log

⍝ check test version
  1⎕CR	(version)
'1.0.0'

⍝ ∇roman

⍝ 1 is a single I
  (roman 1) assert∆match ,'I'
1

⍝ 2 is two I's
  (roman 2) assert∆match 'II'
1

⍝ 3 is three I's
  (roman 3) assert∆match 'III'
1

⍝ 4, being 5 - 1, is IV
  (roman 4) assert∆match 'IV'
1

⍝ 5 is a single V
  (roman 5) assert∆match ,'V'
1

⍝ 6, being 5 + 1, is VI
  (roman 6) assert∆match 'VI'
1

⍝ 9, being 10 - 1, is IX
  (roman 9) assert∆match 'IX'
1

⍝ 20 is two X's
  (roman 27) assert∆match 'XXVII'
1

⍝ 48 is not 50 - 2 but rather 40 + 8
  (roman 48) assert∆match 'XLVIII'
1

⍝ 50 is a single L
  (roman 59) assert∆match 'LIX'
1

⍝ 90, being 100 - 10, is XC
  (roman 93) assert∆match 'XCIII'
1

⍝ 100 is a single C
  (roman 141) assert∆match 'CXLI'
1

⍝ 60, being 50 + 10, is LX
  (roman 163) assert∆match 'CLXIII'
1

⍝ 400, being 500 - 100, is CD
  (roman 402) assert∆match 'CDII'
1

⍝ 500 is a single D
  (roman 575) assert∆match 'DLXXV'
1

⍝ 900, being 1000 - 100, is CM
  (roman 911) assert∆match 'CMXI'
1

⍝ 1000 is a single M
  (roman 1024) assert∆match 'MXXIV'
1

⍝ 3000 is three M's
  (roman 3000) assert∆match 'MMM'
1

test∆show_log log
