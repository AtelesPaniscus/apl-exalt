log←'./connect.tc.log'
⍎ ')COPY ',(⎕FIO 30),'/../../test.apl'

⍝ assert a match

∇ R ← A assert∆match B
    R ← A ≡ B
    → R / exit
    R ← 1⎕CR A
exit:
∇

test∆copy_relative 'connect.apl'
test∆clear_log log

⍝ check test version
  1⎕CR	(version)
'1.1.0'

⍝ ∇winner

⍝ an empty board has no winner
  (winner '. . . . .' ' . . . . .' '  . . . . .' '   . . . . .' '    . . . . .') assert∆match ''
1

⍝ X can win on a 1x1 board
  (winner ,⊂'X') assert∆match ,'X'
1

⍝ O can win on a 1x1 board
  (winner ,⊂'O') assert∆match ,'O'
1

⍝ only edges does not make a winner
  (winner 'O O O X' ' X . . X' '  X . . X' '   X O O O') assert∆match ''
1

⍝ illegal diagonal does not make a winner
  (winner 'X O . .' ' O X X X' '  O X O .' '   . O X .' '    X X O O') assert∆match ''
1

⍝ nobody wins crossing adjacent angles
  (winner 'X . . .' ' . X O .' '  O . X O' '   . O . X' '    . . O .') assert∆match ''
1

⍝ X wins crossing from left to right
  (winner '. O . .' ' O X X X' '  O X O .' '   X X O X' '    . O X .') assert∆match ,'X'
1

⍝ O wins crossing from top to bottom
  (winner '. O . .' ' O X X X' '  O O O .' '   X X O X' '    . O X .') assert∆match ,'O'
1

⍝ X wins using a convoluted path
  (winner '. X X . .' ' X . X . X' '  . X . X .' '   . X X . .' '    O O O O O') assert∆match ,'X'
1

⍝ X wins using a spiral path
  (winner 'O X X X X X X X X' ' O X O O O O O O O' '  O X O X X X X X O' '   O X O X O O O X O' '    O X O X X X O X O' '     O X O O O X O X O' '      O X X X X X O X O' '       O O O O O O O X O' '        X X X X X X X X O') assert∆match ,'X'
1

test∆show_log log
